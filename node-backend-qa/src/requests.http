### User Authentication Tests ###

# Register a new user
POST http://localhost:3000/register
Content-Type: application/json

{
  "fullname": "Gideon Ngetich",
  "email": "gideon.ngetich@outlook.com",
  "password": "password123"
}

###

# Register another user (admin)
POST http://localhost:3000/register
Content-Type: application/json

{
  "fullname": "Admin User",
  "email": "admin@example.com",
  "password": "admin123",
  "role": "admin"
}

###

# Login with user credentials
POST http://localhost:3000/login
Content-Type: application/json

{
  "email": "gideon.ngetich@outlook.com",
  "password": "password123"
}

###

# Login with admin credentials
POST http://localhost:3000/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin123"
}

###

# Get all users (requires authentication)
GET http://localhost:3000/allusers
# Authorization: Bearer your_jwt_token_here

###

# Get user by ID
GET http://localhost:3000/user/1
# Authorization: Bearer your_jwt_token_here

###

# Update user
PUT http://localhost:3000/user/1
# Authorization: Bearer your_jwt_token_here
Content-Type: application/json

{
  "fullname": "Ngetich Updated",
  "email": "gideon.ngetich@outlook.com"
}

###

### Task Management Tests ###

# Create a new task
POST http://localhost:3000/tasks
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJnaWRlb24ubmdldGljaEBvdXRsb29rLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUyMzk1MTEyLCJleHAiOjE3NTI5OTk5MTJ9.N1552_dOQ-LZUvsIBbSreH5U5pHQqZ9FsGcUWv2DjXw
Content-Type: application/json

{
  "title": "Complete Project Documentation",
  "description": "Write comprehensive documentation for the task manager API",
  "status": "in-progress",
  "dueDate": "2024-01-20T18:00:00Z",
  "priority": "HIGH",
  "categoryId": 1
}

###

# Create another task
POST http://localhost:3000/tasks
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJnaWRlb24ubmdldGljaEBvdXRsb29rLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUyMzk1MTEyLCJleHAiOjE3NTI5OTk5MTJ9.N1552_dOQ-LZUvsIBbSreH5U5pHQqZ9FsGcUWv2DjXw
Content-Type: application/json

{
  "title": "Review Code Changes",
  "description": "Review and approve pull requests for the backend",
  "status": "pending",
  "dueDate": "2024-01-18T16:00:00Z",
  "priority": "MEDIUM",
  "categoryId": 1
}

###

# Create a low priority task
POST http://localhost:3000/api/tasks
# Authorization: Bearer your_jwt_token_here
Content-Type: application/json

{
  "title": "Update README",
  "description": "Update project README with new features",
  "status": "todo",
  "dueDate": "2024-01-25T12:00:00Z",
  "priority": "LOW",
  "categoryId": 1
}

###

# Get all tasks for the authenticated user
GET http://localhost:3000/tasks
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJnaWRlb24ubmdldGljaEBvdXRsb29rLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUyMzk1MTEyLCJleHAiOjE3NTI5OTk5MTJ9.N1552_dOQ-LZUvsIBbSreH5U5pHQqZ9FsGcUWv2DjXw

###

# Get a specific task by ID
GET http://localhost:3000/tasks/4
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJnaWRlb24ubmdldGljaEBvdXRsb29rLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUyMzk1MTEyLCJleHAiOjE3NTI5OTk5MTJ9.N1552_dOQ-LZUvsIBbSreH5U5pHQqZ9FsGcUWv2DjXw

###

# Update a task
PUT http://localhost:3000/tasks/1
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJnaWRlb24ubmdldGljaEBvdXRsb29rLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUyMzk1MTEyLCJleHAiOjE3NTI5OTk5MTJ9.N1552_dOQ-LZUvsIBbSreH5U5pHQqZ9FsGcUWv2DjXw
Content-Type: application/json

{
  "title": "Complete Project Documentation (Updated)",
  "description": "Write comprehensive documentation for the task manager API with examples",
  "status": "completed",
  "priority": "HIGH"
}

###

# Toggle task completion status
POST http://localhost:3000/api/tasks/2/toggle
# Authorization: Bearer your_jwt_token_here
Content-Type: application/json

{
  "completed": true
}

###

# Get tasks by status
GET http://localhost:3000/api/tasks/status/completed
# Authorization: Bearer your_jwt_token_here

###

# Get tasks by priority
GET http://localhost:3000/api/tasks/priority/HIGH
# Authorization: Bearer your_jwt_token_here

###

# Get tasks by category
GET http://localhost:3000/api/tasks/category/1
# Authorization: Bearer your_jwt_token_here

###

# Get completed tasks
GET http://localhost:3000/api/tasks/completed
# Authorization: Bearer your_jwt_token_here

###

# Get pending tasks
GET http://localhost:3000/api/tasks/pending
# Authorization: Bearer your_jwt_token_here

###

# Get tasks due today
GET http://localhost:3000/api/tasks/due-today
# Authorization: Bearer your_jwt_token_here

###

# Get overdue tasks
GET http://localhost:3000/api/tasks/overdue
# Authorization: Bearer your_jwt_token_here

###

# Delete a task
DELETE http://localhost:3000/api/tasks/3
# Authorization: Bearer your_jwt_token_here

###

### Error Handling Tests ###

# Try to create task without authentication
POST http://localhost:3000/api/tasks
Content-Type: application/json

{
  "title": "Unauthorized Task",
  "description": "This should fail",
  "status": "todo",
  "dueDate": "2024-01-20T18:00:00Z",
  "priority": "HIGH",
  "categoryId": 1
}

###

# Try to login with invalid credentials
POST http://localhost:3000/api/users/login
Content-Type: application/json

{
  "email": "nonexistent@example.com",
  "password": "wrongpassword"
}

###

# Try to register with invalid data
POST http://localhost:3000/api/users/register
Content-Type: application/json

{
  "fullname": "A",
  "email": "invalid-email",
  "password": "123"
}

###

# Try to create task with invalid data
POST http://localhost:3000/api/tasks
# Authorization: Bearer your_jwt_token_here
Content-Type: application/json

{
  "title": "",
  "description": "This should fail validation",
  "status": "",
  "dueDate": "invalid-date",
  "priority": "INVALID",
  "categoryId": -1
}

###

### Instructions ###
# 1. First run the login request to get a JWT token
# 2. Copy the token from the response
# 3. Replace "your_jwt_token_here" with the actual token
# 4. Uncomment the Authorization headers


### Category Management Tests ###

# Create a new category
POST http://localhost:3000/categories
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJnaWRlb24ubmdldGljaEBvdXRsb29rLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUzMTA2MTAyLCJleHAiOjE3NTM3MTA5MDJ9.kHKbmytrL4CfGhqsvNe0rrSzg5P49XFHH9PfY2BK2-w
Content-Type: application/json

{
  "name": "Work",
  "description": "Tasks related to work projects",
  "color": "#FF5733"
}

###

# Get all categories for the authenticated user
GET http://localhost:3000/categories
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJnaWRlb24ubmdldGljaEBvdXRsb29rLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUzMTA2MTAyLCJleHAiOjE3NTM3MTA5MDJ9.kHKbmytrL4CfGhqsvNe0rrSzg5P49XFHH9PfY2BK2-w

###

# Get a specific category by ID
GET http://localhost:3000/categories/1
Authorization: Bearer your_jwt_token_here

###

# Update a category
PUT http://localhost:3000/categories/1
Authorization: Bearer your_jwt_token_here
Content-Type: application/json

{
  "name": "Personal",
  "description": "Personal tasks and reminders",
  "color": "#33C1FF"
}

###

# Delete a category
DELETE http://localhost:3000/categories/1
Authorization: Bearer your_jwt_token_here

###

