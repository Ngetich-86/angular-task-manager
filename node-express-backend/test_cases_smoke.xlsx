| TestCaseID | Module | TestCaseTitle | Preconditions | TestSteps | ExpectedResult | Priority | TestData | Status |
|------------|--------|---------------|---------------|-----------|----------------|----------|----------|--------|
| SMK001 | Authentication | Login with Valid Credentials | 1. Backend server is running on port 5000<br>2. Test user exists in database<br>3. Database is accessible | 1. Send POST request to /auth/login<br>2. Include valid email and password in JSON body<br>3. Set Content-Type: application/json header | 1. HTTP Status: 200<br>2. Response contains JWT token<br>3. Response contains user information<br>4. Response time < 500ms | High | {"email": "k6test@example.com", "password": "password123"} | Not Executed |
| SMK002 | Authentication | Login with Invalid Password | 1. Backend server is running<br>2. Test user exists in database | 1. Send POST request to /auth/login<br>2. Include valid email but wrong password<br>3. Set Content-Type: application/json header | 1. HTTP Status: 401<br>2. Response contains error message<br>3. Response time < 500ms | High | {"email": "k6test@example.com", "password": "wrongpassword"} | Not Executed |
| SMK003 | Authentication | Login with Non-existent User | 1. Backend server is running<br>2. Database is accessible | 1. Send POST request to /auth/login<br>2. Include non-existent email<br>3. Set Content-Type: application/json header | 1. HTTP Status: 404<br>2. Response contains "User not found" message<br>3. Response time < 500ms | High | {"email": "nonexistent@example.com", "password": "password123"} | Not Executed |
| SMK004 | Authentication | Login with Missing Email | 1. Backend server is running | 1. Send POST request to /auth/login<br>2. Include only password in JSON body<br>3. Set Content-Type: application/json header | 1. HTTP Status: 404<br>2. Response contains error message<br>3. Response time < 500ms | Medium | {"password": "password123"} | Not Executed |
| SMK005 | Authentication | Login with Missing Password | 1. Backend server is running | 1. Send POST request to /auth/login<br>2. Include only email in JSON body<br>3. Set Content-Type: application/json header | 1. HTTP Status: 500<br>2. Response contains error message<br>3. Response time < 500ms | Medium | {"email": "k6test@example.com"} | Not Executed |
| SMK006 | Authentication | Login with Empty Body | 1. Backend server is running | 1. Send POST request to /auth/login<br>2. Send empty body<br>3. Set Content-Type: application/json header | 1. HTTP Status: 500<br>2. Response contains error message<br>3. Response time < 500ms | Medium | "" | Not Executed |
| SMK007 | Registration | Register New User Successfully | 1. Backend server is running<br>2. Database is accessible | 1. Send POST request to /auth/register<br>2. Include valid user data (fullname, email, password)<br>3. Set Content-Type: application/json header | 1. HTTP Status: 201<br>2. Response contains success message<br>3. Response contains user information<br>4. Response time < 500ms | High | {"fullname": "Test User", "email": "newuser@example.com", "password": "Password123!"} | Not Executed |
| SMK008 | Registration | Prevent Duplicate Email Registration | 1. Backend server is running<br>2. User with email already exists | 1. Send POST request to /auth/register<br>2. Include existing email<br>3. Set Content-Type: application/json header | 1. HTTP Status: 400<br>2. Response contains "User already exists" message<br>3. Response time < 500ms | High | {"fullname": "Another User", "email": "existing@example.com", "password": "Password123!"} | Not Executed |
| SMK009 | Registration | Registration with Missing Fullname | 1. Backend server is running | 1. Send POST request to /auth/register<br>2. Omit fullname field<br>3. Set Content-Type: application/json header | 1. HTTP Status: 400<br>2. Response contains validation error<br>3. Response time < 500ms | Medium | {"email": "test@example.com", "password": "Password123!"} | Not Executed |
| SMK010 | Registration | Registration with Invalid Email Format | 1. Backend server is running | 1. Send POST request to /auth/register<br>2. Include invalid email format<br>3. Set Content-Type: application/json header | 1. HTTP Status: 400<br>2. Response contains validation error<br>3. Response time < 500ms | Medium | {"fullname": "Test User", "email": "invalid-email", "password": "Password123!"} | Not Executed |
| SMK011 | Tasks | Get All Tasks (Authenticated) | 1. Backend server is running<br>2. Valid JWT token available<br>3. Tasks exist in database | 1. Send GET request to /tasks<br>2. Include Authorization: Bearer {token} header<br>3. Set Content-Type: application/json header | 1. HTTP Status: 200<br>2. Response contains array of tasks<br>3. Response time < 500ms | High | Valid JWT token in Authorization header | Not Executed |
| SMK012 | Tasks | Create New Task Successfully | 1. Backend server is running<br>2. Valid JWT token available<br>3. Valid category exists | 1. Send POST request to /tasks<br>2. Include valid task data<br>3. Set Authorization and Content-Type headers | 1. HTTP Status: 201<br>2. Response contains success message<br>3. Response contains task information<br>4. Response time < 500ms | High | {"title": "Test Task", "description": "Test Description", "status": "pending", "priority": "MEDIUM", "categoryId": 1} | Not Executed |
| SMK013 | Tasks | Access Tasks Without Authentication | 1. Backend server is running | 1. Send GET request to /tasks<br>2. Omit Authorization header | 1. HTTP Status: 401<br>2. Response contains authentication error<br>3. Response time < 500ms | High | No Authorization header | Not Executed |
| SMK014 | Categories | Get All Categories (Authenticated) | 1. Backend server is running<br>2. Valid JWT token available<br>3. Categories exist in database | 1. Send GET request to /categories<br>2. Include Authorization: Bearer {token} header<br>3. Set Content-Type: application/json header | 1. HTTP Status: 200<br>2. Response contains array of categories<br>3. Response time < 500ms | High | Valid JWT token in Authorization header | Not Executed |
| SMK015 | Categories | Create New Category Successfully | 1. Backend server is running<br>2. Valid JWT token available | 1. Send POST request to /categories<br>2. Include valid category data<br>3. Set Authorization and Content-Type headers | 1. HTTP Status: 201<br>2. Response contains success message<br>3. Response contains category information<br>4. Response time < 500ms | High | {"name": "Test Category", "description": "Test Description", "color": "#FF5733"} | Not Executed |
| SMK016 | Admin | Admin Access to User Management | 1. Backend server is running<br>2. Valid admin JWT token available | 1. Send GET request to /auth/users<br>2. Include admin Authorization header<br>3. Set Content-Type: application/json header | 1. HTTP Status: 200<br>2. Response contains array of users<br>3. Response time < 500ms | High | Admin JWT token in Authorization header | Not Executed |
| SMK017 | Admin | Regular User Cannot Access Admin Routes | 1. Backend server is running<br>2. Valid user JWT token available | 1. Send GET request to /auth/users<br>2. Include user Authorization header<br>3. Set Content-Type: application/json header | 1. HTTP Status: 403<br>2. Response contains access denied message<br>3. Response time < 500ms | High | Regular user JWT token in Authorization header | Not Executed |
| SMK018 | Performance | Response Time Under Normal Load | 1. Backend server is running<br>2. Database is accessible<br>3. Normal system load | 1. Execute multiple API requests<br>2. Monitor response times<br>3. Calculate 95th percentile | 1. 95% of requests < 800ms<br>2. Error rate < 20%<br>3. System remains stable | High | Various API endpoints with valid data | Not Executed |
| SMK019 | Error Handling | Graceful Error Responses | 1. Backend server is running<br>2. Various error conditions | 1. Send requests with invalid data<br>2. Send requests to non-existent endpoints<br>3. Monitor error responses | 1. Appropriate HTTP status codes<br>2. Meaningful error messages<br>3. Response time < 500ms | Medium | Invalid data, non-existent IDs, malformed requests | Not Executed |
| SMK020 | Database | Database Connection Stability | 1. Backend server is running<br>2. Database is accessible | 1. Execute database test endpoint<br>2. Monitor connection status<br>3. Verify data retrieval | 1. HTTP Status: 200<br>2. Database connection successful<br>3. Data retrieved correctly | High | GET /test-db endpoint | Not Executed |
